"use strict";(self.webpackChunksolicy_documentation=self.webpackChunksolicy_documentation||[]).push([[680],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return p}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),h=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=h(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=h(n),p=r,f=u["".concat(c,".").concat(p)]||u[p]||d[p]||s;return n?a.createElement(f,i(i({ref:t},l),{},{components:n})):a.createElement(f,i({ref:t},l))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var h=2;h<s;h++)i[h]=n[h];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8443:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return h},toc:function(){return l},default:function(){return u}});var a=n(7462),r=n(3366),s=(n(7294),n(3905)),i=["components"],o={sidebar_position:4},c="Back-end",h={unversionedId:"learning/back-end",id:"learning/back-end",title:"Back-end",description:"Back-End Web Architecture",source:"@site/docs/learning/back-end.md",sourceDirName:"learning",slug:"/learning/back-end",permalink:"/learning/back-end",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Vue",permalink:"/learning/front-end/vue"}},l=[{value:"Back-End Web Architecture",id:"back-end-web-architecture",children:[],level:2},{value:"What are the clients?",id:"what-are-the-clients",children:[],level:2},{value:"What is a back-end?",id:"what-is-a-back-end",children:[],level:2},{value:"What is a server?",id:"what-is-a-server",children:[],level:2},{value:"What are the core functions of the app?",id:"what-are-the-core-functions-of-the-app",children:[],level:2},{value:"What kinds of responses can a server send?",id:"what-kinds-of-responses-can-a-server-send",children:[],level:2},{value:"What is a database, and why do we need to use them?",id:"what-is-a-database-and-why-do-we-need-to-use-them",children:[],level:2},{value:"What is a Web API, really?",id:"what-is-a-web-api-really",children:[],level:2},{value:"Other principles of the request-response cycle:",id:"other-principles-of-the-request-response-cycle",children:[],level:2}],d={toc:l};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"back-end"},"Back-end"),(0,s.kt)("h2",{id:"back-end-web-architecture"},"Back-End Web Architecture"),(0,s.kt)("p",null,"This article provides an overview of servers, databases, routing, and anything else that happens between when a client makes a request and receives a response.\nBack-end Architecture\nSoftware engineers seem to always be discussing the front-end and the back-end of their apps. But what exactly does this mean?"),(0,s.kt)("p",null,"The front-end is the code that is executed on the client side. This code (typically HTML, CSS, and JavaScript) runs in the user\u2019s browser and creates the user interface."),(0,s.kt)("p",null,"The back-end is the code that runs on the server, that receives requests from the clients, and contains the logic to send the appropriate data back to the client. The back-end also includes the database, which will persistently store all of the data for the application. This article focuses on the hardware and software on the server-side that make this possible."),(0,s.kt)("p",null,"Review HTTP and REST if you want to refresh your memory on these topics. These are the main conventions that provide structure to the request-response cycle between clients and servers."),(0,s.kt)("p",null,"Let\u2019s start by reviewing the client-server relationship, and then we can start to put the pieces all together!"),(0,s.kt)("h2",{id:"what-are-the-clients"},"What are the clients?"),(0,s.kt)("p",null,"The clients are anything that send requests to the back-end. They are often browsers that make requests for the HTML and JavaScript code that they will execute to display websites to the end user. However, there are many different kinds of clients: they might be a mobile application, an application running on another server, or even a web enabled smart appliance."),(0,s.kt)("h2",{id:"what-is-a-back-end"},"What is a back-end?"),(0,s.kt)("p",null,"The back-end is all of the technology required to process the incoming request and generate and send the response to the client. This typically includes three major parts:"),(0,s.kt)("p",null,"The server. This is the computer that receives requests.\nThe app. This is the application running on the server that listens for requests, retrieves information from the database, and sends a response.\nThe database. Databases are used to organize and persist data."),(0,s.kt)("h2",{id:"what-is-a-server"},"What is a server?"),(0,s.kt)("p",null,"A server is simply a computer that listens for incoming requests. Though there are machines made and optimized for this particular purpose, any computer that is connected to a network can act as a server. In fact, you will often use your very own computer as server when developing apps."),(0,s.kt)("h2",{id:"what-are-the-core-functions-of-the-app"},"What are the core functions of the app?"),(0,s.kt)("p",null,"The server runs an app that contains logic about how to respond to various requests based on the HTTP verb and the Uniform Resource Identifier (URI). The pair of an HTTP verb and a URI is called a route and matching them based on a request is called routing."),(0,s.kt)("p",null,"Some of these handler functions will be middleware. In this context, middleware is any code that executes between the server receiving a request and sending a response. These middleware functions might modify the request object, query the database, or otherwise process the incoming request. Middleware functions typically end by passing control to the next middleware function, rather than by sending a response."),(0,s.kt)("p",null,"Eventually, a middleware function will be called that ends the request-response cycle by sending an HTTP response back to the client."),(0,s.kt)("p",null,"Often, programmers will use a framework like Express or Ruby on Rails to simplify the logic of routing. For now, just think that each route can have one or many handler functions that are executed whenever a request to that route (HTTP verb and URI) is matched."),(0,s.kt)("h2",{id:"what-kinds-of-responses-can-a-server-send"},"What kinds of responses can a server send?"),(0,s.kt)("p",null,"The data that the server sends back can come in different forms. For example, a server might serve up an HTML file, send data as JSON, or it might send back only an HTTP status code. You\u2019ve probably seen the status code \u201c404 - Not Found\u201d whenever you\u2019ve tried navigating to a URI that doesn\u2019t exist, but there are many more status codes that indicate what happened when the server received the request."),(0,s.kt)("h2",{id:"what-is-a-database-and-why-do-we-need-to-use-them"},"What is a database, and why do we need to use them?"),(0,s.kt)("p",null,"Databases are commonly used on the back-end of web applications. These databases provide an interface to save data in a persistent way to memory. Storing the data in a database both reduces the load on the main memory of the server CPU and allows the data to be retrieved if the server crashes or loses power."),(0,s.kt)("p",null,"Many requests sent to the server might require a database query. A client might request information that is stored in the database, or a client might submit data with their request to be added to the database."),(0,s.kt)("h2",{id:"what-is-a-web-api-really"},"What is a Web API, really?"),(0,s.kt)("p",null,"An API is a collection of clearly defined methods of communication between different software components."),(0,s.kt)("p",null,"More specifically, a Web API is the interface created by the back-end: the collection of endpoints and the resources these endpoints expose."),(0,s.kt)("p",null,"A Web API is defined by the types of requests that it can handle, which is determined by the routes that it defines, and the types of responses that the clients can expect to receive after hitting those routes."),(0,s.kt)("p",null,"One Web API can be used to provide data for different front-ends. Since a Web API can provide data without really specifying how the data is viewed, multiple different HTML pages or mobile applications can be created to view the data from the Web API."),(0,s.kt)("h2",{id:"other-principles-of-the-request-response-cycle"},"Other principles of the request-response cycle:"),(0,s.kt)("p",null,"The server typically cannot initiate responses without requests!\nEvery request needs a response, even if it\u2019s just a 404 status code indicating that the content was not found. Otherwise your client will be left hanging (indefinitely waiting).\nThe server should not send more than one response per request. This will throw errors in your code."))}u.isMDXComponent=!0}}]);